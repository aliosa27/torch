#!/bin/sh
# Copyright (C) 2015 Torch Project
. /usr/share/libubox/jshn.sh

CFGDOMAINS="/etc/config/torchdomains"
UPDATEFILE="/etc/config/torchupdates"

LOGFILE="/tmp/torchapi.log"

TORCHDOMAIN=$(grep "torchapi" $CFGDOMAINS | cut -d= -f2)
FIRMVERSION=$(grep "firmware" $UPDATEFILE | cut -d= -f2)
APIROUTE=$(grep "api_firmware" $CFGDOMAINS | cut -d= -f2)
XHEADERMAC=$(grep "wan_mac" $CFGDOMAINS | cut -d= -f2)
TIMESTAMP="date +%s"
UPG_VER=$(grep "upg_ver" $UPDATEFILE | cut -d= -f2)
UPG_RETRY=$(grep "upg_retry" $UPDATEFILE | cut -d= -f2)

BACKUPFIRMWARE="/tmp/firmware.bin"
SEND_LOGS="/etc/torch/send_logs"
MAX_RETRY_NUM=2

send_log_on_email() {
	# send log on email
	if [ -f "$SEND_LOGS" ]; then
		$SEND_LOGS
		sleep 3
	fi
}

do_version_check() {

   if [ "$1" == "$2" ]; then
       echo [`$TIMESTAMP`" --->] No new firmware version ..." >> $LOGFILE
       return 0
   fi

   ver1_new=`echo $1 | cut -d "." -f1`
   ver2_new=`echo $1 | cut -d "." -f2`
   ver3_new=`echo $1 | cut -d "." -f3`

   ver1_old=`echo $2 | cut -d "." -f1`
   ver2_old=`echo $2 | cut -d "." -f2`
   ver3_old=`echo $2 | cut -d "." -f3`

  # if [ "$ver1_new" -gt "$ver1_old" ] || [ "$ver2_new" -gt "$ver2_old" ] || [ "$ver3_new" -gt "$ver3_old" ]; then
  #     echo [`$TIMESTAMP`" --->] New firmware version $1" >> $LOGFILE
  #     return 1
  # else
  #     echo [`$TIMESTAMP`" --->] No new firmware version ..." >> $LOGFILE
  #     return 0
  # fi

   upg="0"

   if [ "$ver1_new" -gt "$ver1_old" ]; then
        upg="1"
   else
     if [ "$ver2_new" -gt "$ver2_old" ]; then
        upg="1"
     else
        if [ "$ver2_new" -eq "$ver2_old" ] && [ "$ver3_new" -gt "$ver3_old" ]; then
          upg="1"
        fi
     fi
   fi

   if  [ "$upg" == "1" ]; then
       echo [`$TIMESTAMP`" --->] New firmware version $1" >> $LOGFILE
       return 1
   else
       echo [`$TIMESTAMP`" --->] No new firmware version ..." >> $LOGFILE
       return 0
   fi
}


echo [`$TIMESTAMP`" --->] Request Firmware update ..." >> $LOGFILE
echo [`$TIMESTAMP`" --->] $TORCHDOMAIN$APIROUTE" >> $LOGFILE

REP=$(curl -H "x-router-mac: $XHEADERMAC" -H "Content-Type: application/json" \
    -X GET $TORCHDOMAIN$APIROUTE)

echo -e [`$TIMESTAMP`" <---] $REP" >> $LOGFILE

# replace 'null' by "", jshn bug
REP=$(echo "$REP" | sed 's/null/""/g' )

json_init
json_load "$REP"
json_get_var status status

if [ "$status" == "ok" ]; then
	json_select data
	json_get_var url url
	json_get_var version version
	json_get_var checksum checksum
	json_get_var fileName fileName

	if [ ! -z "$UPG_VER" ] && [ ! -z "$UPG_RETRY" ]; then
		if [ "$UPG_VER" == "$version" ] && [ $UPG_RETRY -ge 1 ]; then
			echo [`$TIMESTAMP`" --->] Updating the firmware is already made, but unsuccessful. Exit!" >> $LOGFILE
			# free JSON
			json_cleanup

			# send log on email
			send_log_on_email

			exit 0
		fi
	fi

	do_version_check "$version" "$FIRMVERSION"
	if [ $? != 0 ]; then

		# OK, need update firmware
		RETRY_NUM=0
		while [ $RETRY_NUM -le $MAX_RETRY_NUM ]; do

			RETRY_NUM=$((RETRY_NUM+1))

			if [ -f /tmp/$fileName ]; then
				# delete old file 
				rm -f "/tmp/$fileName"
			fi

			wget -O "/tmp/$fileName" "$url" 2>> $LOGFILE
			md5=`md5sum /tmp/${fileName} | awk '{ print $1 }'`
			if [ "$md5" == "$checksum" ]; then
				echo [`$TIMESTAMP`" --->] Checksum file ok! Saving config and start firmware update ..." >> $LOGFILE
				
				# store info in old firmware
				if [ -z "$UPG_VER" ]; then
					echo "upg_ver=$version" >> $UPDATEFILE
				else
					sed -i "s/upg_ver=.*/upg_ver=$version/g" $UPDATEFILE
				fi

				if [ -z "$UPG_RETRY" ]; then
					echo "upg_retry=0" >> $UPDATEFILE
				else
					UPG_RETRY=$((UPG_RETRY+1))
					sed -i "s/upg_retry=.*/upg_retry=$UPG_RETRY/g" $UPDATEFILE
				fi

				mtd_dev=$(cat '/proc/mtd' | grep 'firmware' | awk -F':' '{print $1}')
				if [ -z "$mtd_dev" ]; then
					echo [`$TIMESTAMP`" --->] Not found MTD device \"firmware\". Ð¡ontinue without creating a backup firmware!" >> $LOGFILE
				else

					echo [`$TIMESTAMP`" --->] Begin store backup into RAM ($BACKUPFIRMWARE)" >> $LOGFILE

					cat "/dev/$mtd_dev" > $BACKUPFIRMWARE

					echo [`$TIMESTAMP`" --->] Store done." >> $LOGFILE
					echo [`$TIMESTAMP`" --->] "`ls -la $BACKUPFIRMWARE` >> $LOGFILE
				fi

				echo [`$TIMESTAMP`" --->] Begin upgrade " >> $LOGFILE
				mtd write "/tmp/$fileName" firmware 2>> $LOGFILE

				VERIFY_FILE="/tmp/verify"
				echo [`$TIMESTAMP`" --->] Verification new firmware..." >> $LOGFILE

				mtd verify "/tmp/$fileName" firmware 2> $VERIFY_FILE

				echo [`$TIMESTAMP`" --->] "`cat $VERIFY_FILE` >> $LOGFILE

				if [ -z $(cat $VERIFY_FILE | grep 'Success') ]; then
					# Verify failed
					if [ ! -z "$mtd_dev" ] && [ -f "$BACKUPFIRMWARE" ]; then
						echo [`$TIMESTAMP`" --->] Rollback to old firmware." >> $LOGFILE
						
						# restore old firmware
						mtd write "$BACKUPFIRMWARE" firmware 2>> $LOGFILE

						echo [`$TIMESTAMP`" --->] Rollback done." >> $LOGFILE
					fi

					# send log on email
					send_log_on_email

					# system reboot
					reboot -f
				else
					# Verify success
					echo [`$TIMESTAMP`" --->] Send PUT response" >> $LOGFILE

					REP=$(curl -H "x-router-mac: $XHEADERMAC" -H "Content-Type: application/json" \
						-X PUT -d '{"firmwareVersion":"'"$version"'"}' \
						$TORCHDOMAIN$APIROUTE)

					echo [`$TIMESTAMP`" <---] $REP" >> $LOGFILE

					# system reboot 
					reboot -f
				fi

				# while exit
				break
			else
				echo [`$TIMESTAMP`" --->] Bad checksum! Retry firmware upgrade [$RETRY_NUM]" >> $LOGFILE
			fi
		done
		
		if [ $RETRY_NUM -ge $MAX_RETRY_NUM ]; then
			echo [`$TIMESTAMP`" --->] Firmware not upgraded! Exit." >> $LOGFILE

			# send log on email
			send_log_on_email

		fi

	else
      echo [`$TIMESTAMP`] " -->] Triggered firmware (send PUT response)" >> $LOGFILE

	  REP=$(curl -H "x-router-mac: $XHEADERMAC" -H "Content-Type: application/json" \
		    -X PUT -d '{"firmwareVersion":"'"$FIRMVERSION"'"}' \
		    $TORCHDOMAIN$APIROUTE)

	  echo [`$TIMESTAMP`] " <--] $REP" >> $LOGFILE
	fi
fi


