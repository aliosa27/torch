#!/bin/sh
# Copyright (C) 2015 Torch Project
. /usr/share/libubox/jshn.sh

CFGDOMAINS="/etc/config/torchdomains"
UPDATEFILE="/etc/config/torchupdates"

LOGFILE="/tmp/torchapi.log"

TORCHDOMAIN=$(grep "torchapi" $CFGDOMAINS | cut -d= -f2)
FIRMVERSION=$(grep "firmware" $UPDATEFILE | cut -d= -f2)
APIROUTE=$(grep "api_firmware" $CFGDOMAINS | cut -d= -f2)
XHEADERMAC=$(grep "wan_mac" $CFGDOMAINS | cut -d= -f2)
TIMESTAMP="date +%s"
BACKUPFIRMWARE="/tmp/firmware.bin"
SEND_LOGS="/etc/torch/send_logs"

LOCKFILE="/tmp/firmware.lock"

VERBOSE=1

log() {
	local msg="[`$TIMESTAMP`]> $@"
	echo "$msg" >> $LOGFILE
	[ ! -z "$VERBOSE" ] && [ "$VERBOSE" -ge 1 ] && {
		logger -s "${0##*/} $msg"
		echo "<1>${0##*/} $msg" > /dev/kmsg
	}
}

send_log_on_email() {
	# send log on email
	if [ -f "$SEND_LOGS" ]; then
		$SEND_LOGS
		sleep 3
	fi
}

if [ -f "$LOCKFILE" ]; then
	t=$(cat "$LOCKFILE")
	dt=$((`$TIMESTAMP` - t))

	# less 300 sec
	[ "$dt" -lt 300 ] && {
		log "Detected attempt to parallel execution of multiple processes for updating firmware. Exit!"

		send_log_on_email
		exit 0
	}
fi

echo -e `$TIMESTAMP` > "$LOCKFILE"

do_version_check() {

	if [ "$1" == "$2" ]; then
		log "No new firmware version ..."
		return 0
	fi

	ver1_new=`echo $1 | cut -d "." -f1`
	ver2_new=`echo $1 | cut -d "." -f2`
	ver3_new=`echo $1 | cut -d "." -f3`

	ver1_old=`echo $2 | cut -d "." -f1`
	ver2_old=`echo $2 | cut -d "." -f2`
	ver3_old=`echo $2 | cut -d "." -f3`

	upg="0"

	if [ "$ver1_new" -gt "$ver1_old" ]; then
		upg="1"
	else
		if [ "$ver2_new" -gt "$ver2_old" ]; then
			upg="1"
		else
			if [ "$ver2_new" -eq "$ver2_old" ] && [ "$ver3_new" -gt "$ver3_old" ]; then
				upg="1"
			fi
		fi
	fi

	if  [ "$upg" == "1" ]; then
		log "New firmware version $1"
		return 1
	else
		log "No new firmware version ..."
		return 0
	fi
}


log "Request Firmware update ..."
log "$TORCHDOMAIN$APIROUTE"

REP=$(curl -H "x-router-mac: $XHEADERMAC" -H "Content-Type: application/json" \
    -X GET $TORCHDOMAIN$APIROUTE)

log "<--- $REP"

# replace 'null' by "", jshn bug
REP=$(echo "$REP" | sed 's/null/""/g' )

json_init
json_load "$REP"
json_get_var status status

if [ "$status" == "ok" ]; then
	json_select data
	json_get_var url url
	json_get_var version version
	json_get_var checksum checksum
	json_get_var fileName fileName
	
	UPGMD5=""
	UPGVER=""
	UPGFW=""
	if [ ! -z $(uci -q get system.upg) ]; then
		UPGMD5=$(uci -q get system.upg.md5)
		UPGVER=$(uci -q get system.upg.ver)
		UPGFW=$(uci -q get system.upg.fw)
	fi

	if [ ! -z "$UPGVER" ] && [ ! -z "$UPGMD5" ] && [ ! -z "$UPGFW" ]; then
		if [ "$UPGVER" == "$version" ] && [ "$UPGMD5" == "$checksum" ] && [ "$UPGFW" == "$fileName" ]; then
			log "Updating the firmware is already made, but unsuccessful ($UPGVER,$UPGMD5,$UPGFW). Exit!"
			# free JSON
			json_cleanup

			# send log on email
			send_log_on_email

			exit 0
		fi
	fi

	do_version_check "$version" "$FIRMVERSION"
	if [ $? != 0 ]; then

		. /lib/functions/system.sh

		# stop cron
		/etc/init.d/cron stop

		# stop squid
		/etc/init.d/squid stop

		# OK, need update firmware
		MAX_RETRY_NUM=2
		RETRY_NUM=0
		while [ $RETRY_NUM -le $MAX_RETRY_NUM ]; do

			RETRY_NUM=$((RETRY_NUM+1))

			if [ -f /tmp/$fileName ]; then
				# delete old file 
				rm -f "/tmp/$fileName"
			fi

			wget --timeout 120  -O "/tmp/$fileName" "$url" 2>> $LOGFILE
			md5=$(md5sum /tmp/${fileName} | awk '{ print $1 }')
			if [ "$md5" == "$checksum" ]; then
				log "Checksum file ok! Saving config and start firmware update ..."

				if [ -z $(uci -q get system.upg) ]; then
					uci -q set system.upg=info
					# store info in old firmware
					uci -q set system.upg.md5="$checksum"
					uci -q set system.upg.ver="$version"
					uci -q set system.upg.fw="$fileName"

					uci commit system
				fi

				store_backup="0"

				mtd_dev=$(cat '/proc/mtd' | grep 'firmware' | awk -F':' '{print $1}')
				if [ -z "$mtd_dev" ]; then
					log "Not found MTD device \"firmware\". Continue without creating a backup firmware!"
				else
					#check free RAM space
					freeMem=$(grep "MemFree" /proc/meminfo | awk -F" " '{print $2}')
					mtd_size=$(mtd_get_part_size "firmware")

					# in kB
					mtd_size=$((mtd_size/1024))

					log "Detect RAM free space $freeMem kB, need $mtd_size kB."

					if [ $mtd_size -ge $freeMem ]; then
						log "Not enough free memory. Continue without creating a backup firmware!"
					else
						log "Begin store backup into RAM ($BACKUPFIRMWARE)"

						RETRY_BACKUP_NUM=0
						while [ $RETRY_BACKUP_NUM -le 2 ]; do

							RETRY_BACKUP_NUM=$((RETRY_BACKUP_NUM+1))

							# remove old backup file
							rm -f "$BACKUPFIRMWARE"

							# store current firmware into RAM
							cat "/dev/$mtd_dev" > $BACKUPFIRMWARE

							log "Check backup md5sum..."
							md5_d=$(md5sum "/dev/$mtd_dev" | awk -F" " '{print $1}')
							md5_f=$(md5sum "$BACKUPFIRMWARE" | awk -F" " '{print $1}')
							if [ "$md5_d" == "$md5_f" ]; then
								store_backup="1"
								break
							fi
							log "Wrong md5sum org/file [\"$md5_d\" / \"$md5_f\"].Retry [$RETRY_BACKUP_NUM]"
						done

						log "Store done."
						log "`ls -la $BACKUPFIRMWARE`"
					fi
				fi

				log "Begin upgrade"
				mtd write "/tmp/$fileName" firmware 2>> $LOGFILE

				VERIFY_FILE="/tmp/verify"
				log "Verification new firmware..."

				mtd verify "/tmp/$fileName" firmware 2> $VERIFY_FILE

				log "`cat $VERIFY_FILE`"

				if [ -z $(cat $VERIFY_FILE | grep 'Success') ]; then
					# Verify failed
					if [ "$store_backup" == "1" ] && [ -f "$BACKUPFIRMWARE" ]; then
						log "Rollback to old firmware."

						# free space, remove new firmware
						rm -f "/tmp/$fileName"

						# restore old firmware
						mtd write "$BACKUPFIRMWARE" firmware 2>> $LOGFILE

						log "Rollback done."
					fi

					# send log on email
					send_log_on_email

					# system reboot
					reboot -f
				else
					# Verify success
					log "Send PUT response"

					REP=$(curl -H "x-router-mac: $XHEADERMAC" -H "Content-Type: application/json" \
						-X PUT -d '{"firmwareVersion":"'"$version"'"}' \
						$TORCHDOMAIN$APIROUTE)

					log "<--- $REP"

					# system reboot 
					reboot -f
				fi

				# while exit
				break
			else
				log "Bad checksum! Retry firmware upgrade [$RETRY_NUM]"
			fi
		done
		
		if [ $RETRY_NUM -ge $MAX_RETRY_NUM ]; then
			log "Firmware not upgraded! Exit."

			# send log on email
			send_log_on_email

		fi
	
		# start cron
		/etc/init.d/cron start

	else
      log "Triggered firmware (send PUT response)"

	  REP=$(curl -H "x-router-mac: $XHEADERMAC" -H "Content-Type: application/json" \
		    -X PUT -d '{"firmwareVersion":"'"$FIRMVERSION"'"}' \
		    $TORCHDOMAIN$APIROUTE)

	  log "<--- $REP"
	fi
fi

# remove lock
rm -f "$LOCKFILE"

